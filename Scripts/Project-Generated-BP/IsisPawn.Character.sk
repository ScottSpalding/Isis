// USTRUCT(BlueprintType)
// struct FIsisPawnStats
// {
//        GENERATED_USTRUCT_BODY()
// 
// public:
// 
//        FIsisPawnStats() {}
// 
//        UPROPERTY(VisibleAnywhere, SimpleDisplay, Category = "Stats")
//        TArray<FIsisPawnStat> CurrentStats;
// 
//        int32 GetStatCurrentValue(EPawnStatType PawnStatType) const
//        {
//                for (FIsisPawnStat CurrentStat : CurrentStats)
//                {
//                        if (CurrentStat.StatType == PawnStatType)
//                        {
//                                return CurrentStat.CurrentStatValue;
//                        }
//                }
//                 TODO We need a stat, so getting here is super bad, but return Int32 will  have terrible results.
//                return INT32_MAX;
//        }
// 
//        void SetCurrentStat(EPawnStatType PawnStatType, int32 NewStatValue)
//        {
//                FIsisPawnStat NewStat = FIsisPawnStat(PawnStatType, NewStatValue);
//                CurrentStats.Add(NewStat);
//        }
// 
//        void SetDefaultStat(EPawnStatType PawnStatType, int32 NewStatValue)
//        {
//                auto OldStatPointer = CurrentStats.FindByPredicate([PawnStatType](const FIsisPawnStat& StatToCheck)
//                {
//                        return StatToCheck.StatType == PawnStatType;
//                });
//                if (OldStatPointer)
//                {
//                }
// 
//                 TODO make better
//                int32 FoundIndex = -1;
//                for (int32 Index = 0; Index < CurrentStats.Num() - 1; Index++)
//                {
//                        if (CurrentStats[Index].StatType == PawnStatType)
//                        {
//                                FoundIndex = Index;
//                                break;
//                        }
//                }
//                if (FoundIndex != -1)
//                {
//                        CurrentStats.RemoveAt(FoundIndex);
//                }
// 
//                FIsisPawnStat NewStat = FIsisPawnStat(PawnStatType, NewStatValue);
//                CurrentStats.Add(NewStat);
//        }
// 
//        void ResetStats()
//        {
//                for (FIsisPawnStat CurrentStat : CurrentStats)
//                {
//                        CurrentStat.ResetStat();
//                }
//        }
// };
//
// UE4 name of this class: IsisPawn

annotations: &reflected_cpp &name("IsisPawn")

$$ .
